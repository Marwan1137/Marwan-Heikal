// Mocks generated by Mockito 5.4.5 from annotations
// in meal_tracker/test/domain/usecases/sort_meal_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:meal_tracker/core/result.dart' as _i2;
import 'package:meal_tracker/domain/entity/meal.dart' as _i5;
import 'package:meal_tracker/domain/repo/meal_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MealRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealRepo extends _i1.Mock implements _i3.MealRepo {
  MockMealRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.Meal>>> getMeals() =>
      (super.noSuchMethod(
            Invocation.method(#getMeals, []),
            returnValue: _i4.Future<_i2.Result<List<_i5.Meal>>>.value(
              _FakeResult_0<List<_i5.Meal>>(
                this,
                Invocation.method(#getMeals, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Meal>>>);

  @override
  _i4.Future<_i2.Result<_i5.Meal>> addMeal(_i5.Meal? meal) =>
      (super.noSuchMethod(
            Invocation.method(#addMeal, [meal]),
            returnValue: _i4.Future<_i2.Result<_i5.Meal>>.value(
              _FakeResult_0<_i5.Meal>(
                this,
                Invocation.method(#addMeal, [meal]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.Meal>>);

  @override
  _i4.Future<_i2.Result<_i5.Meal>> updateMeal(_i5.Meal? meal) =>
      (super.noSuchMethod(
            Invocation.method(#updateMeal, [meal]),
            returnValue: _i4.Future<_i2.Result<_i5.Meal>>.value(
              _FakeResult_0<_i5.Meal>(
                this,
                Invocation.method(#updateMeal, [meal]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.Meal>>);

  @override
  _i4.Future<_i2.Result<bool>> deleteMeal(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMeal, [id]),
            returnValue: _i4.Future<_i2.Result<bool>>.value(
              _FakeResult_0<bool>(this, Invocation.method(#deleteMeal, [id])),
            ),
          )
          as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Meal>>> sortMeals({
    required List<_i5.Meal>? meals,
    required _i3.SortBy? sortBy,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sortMeals, [], {#meals: meals, #sortBy: sortBy}),
            returnValue: _i4.Future<_i2.Result<List<_i5.Meal>>>.value(
              _FakeResult_0<List<_i5.Meal>>(
                this,
                Invocation.method(#sortMeals, [], {
                  #meals: meals,
                  #sortBy: sortBy,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i5.Meal>>>);
}
